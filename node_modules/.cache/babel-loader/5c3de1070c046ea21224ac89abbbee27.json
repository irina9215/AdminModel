{"ast":null,"code":"import \"antd/es/table/style\";\nimport _Table from \"antd/es/table\";\nimport \"antd/es/notification/style\";\nimport _notification from \"antd/es/notification\";\nimport \"antd/es/button/style\";\nimport _Button from \"antd/es/button\";\nimport _classCallCheck from \"/Users/irimo/Documents/GitHub/prototype-0.1-src_v2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/irimo/Documents/GitHub/prototype-0.1-src_v2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/irimo/Documents/GitHub/prototype-0.1-src_v2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/irimo/Documents/GitHub/prototype-0.1-src_v2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/irimo/Documents/GitHub/prototype-0.1-src_v2/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/irimo/Documents/GitHub/prototype-0.1-src_v2/src/pages/ModelManagementScenario.js\";\nimport _ from 'lodash';\nimport React from 'react';\nimport Item from 'antd/lib/list/Item';\n\nvar DATASOURCE = _.range(20).map(function (item, index) {\n  return {\n    index: index,\n    name: \"Scenario \".concat(index),\n    msrp: '669,000',\n    msrpVAT: '699,000',\n    options: 5,\n    isDefault: false\n  };\n});\n\nfunction Random(min, max) {\n  return Math.round(Math.random() * (max - min)) + min;\n}\n\nDATASOURCE.forEach(function (item, index) {\n  if (index < 5) {\n    item.options = index + 5;\n  } else {\n    item.options = index;\n  }\n});\nDATASOURCE.forEach(function (item, index) {\n  if (index > 0) {\n    item.msrp = 669000 + Random(0, 10) * 10000;\n    item.msrpVAT = item.msrp + 30000;\n  }\n});\n\nvar ModelManagementScenario =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ModelManagementScenario, _React$Component);\n\n  function ModelManagementScenario() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ModelManagementScenario);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ModelManagementScenario)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.COLUMNS = [{\n      title: 'ID',\n      dataIndex: 'index',\n      key: 'index'\n    }, {\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name'\n    }, {\n      title: 'MSRP',\n      dataIndex: 'msrp',\n      key: 'msrp'\n    }, {\n      title: 'MSRP VAT',\n      dataIndex: 'msrpVAT',\n      key: 'msrpVAT'\n    }, {\n      title: 'Options',\n      dataIndex: 'options',\n      key: 'options'\n    }, {\n      title: 'Actions',\n      dataIndex: 'index',\n      key: 'isDefault',\n      render: function render(index) {\n        if (index === 0) {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 61\n            },\n            __self: this\n          }, React.createElement(_Button, {\n            icon: \"eye\",\n            type: \"primary\",\n            onClick: function onClick() {\n              return _this.props.history.push('/reporting');\n            },\n            ghost: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 62\n            },\n            __self: this\n          }, \"Details\"), React.createElement(_Button, {\n            icon: \"delete\",\n            type: \"primary\",\n            ghost: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 63\n            },\n            __self: this\n          }, \"Delete\"), React.createElement(_Button, {\n            icon: \"check-circle\",\n            type: \"danger\",\n            ghost: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 64\n            },\n            __self: this\n          }, \"Is Default\"));\n        } else {\n          return React.createElement(\"div\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 70\n            },\n            __self: this\n          }, React.createElement(_Button, {\n            icon: \"eye\",\n            type: \"primary\",\n            onClick: function onClick() {\n              return _this.props.history.push('/reporting');\n            },\n            ghost: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 71\n            },\n            __self: this\n          }, \"Details\"), React.createElement(_Button, {\n            icon: \"delete\",\n            type: \"primary\",\n            ghost: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 72\n            },\n            __self: this\n          }, \"Delete\"), React.createElement(_Button, {\n            icon: \"check-circle\",\n            onClick: function onClick() {\n              _this.openNotification();\n\n              setTimeout(function () {\n                _this.props.history.push('/model-management');\n              }, 1000);\n            },\n            type: \"primary\",\n            ghost: true,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 73\n            },\n            __self: this\n          }, \"Set as Default\"));\n        }\n      }\n    }];\n    return _this;\n  }\n\n  _createClass(ModelManagementScenario, [{\n    key: \"openNotification\",\n    value: function openNotification() {\n      _notification.open({\n        message: 'Notification Title',\n        description: 'Set as default success!',\n        duration: 1,\n        onClick: function onClick() {\n          console.log('Notification Clicked!');\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(\"div\", {\n        className: \"model-management\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, \"Scenario\"), React.createElement(_Table, {\n        dataSource: DATASOURCE,\n        columns: this.COLUMNS,\n        rowSelection: {\n          type: 'checkbox',\n          columnTitle: 'Select for Comparision'\n        },\n        rowKey: \"index\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"actions\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(_Button, {\n        icon: \"copy\",\n        type: \"primary\",\n        ghost: true,\n        onClick: function onClick() {\n          return _this2.props.history.push('/competitor-comparison');\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, \"Comparision\"), React.createElement(_Button, {\n        icon: \"plus\",\n        type: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }, \"Add\")));\n    }\n  }]);\n\n  return ModelManagementScenario;\n}(React.Component);\n\nexport default ModelManagementScenario;","map":{"version":3,"sources":["/Users/irimo/Documents/GitHub/prototype-0.1-src_v2/src/pages/ModelManagementScenario.js"],"names":["_","React","Item","DATASOURCE","range","map","item","index","name","msrp","msrpVAT","options","isDefault","Random","min","max","Math","round","random","forEach","ModelManagementScenario","COLUMNS","title","dataIndex","key","render","props","history","push","openNotification","setTimeout","open","message","description","duration","onClick","console","log","type","columnTitle","Component"],"mappings":"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","sourcesContent":["import _ from 'lodash';\nimport React from 'react';\nimport { Table, Button, notification } from 'antd';\nimport Item from 'antd/lib/list/Item';\n\nlet DATASOURCE = _.range(20).map((item, index) => ({\n  index,\n  name: `Scenario ${index}`,\n  msrp: '669,000',\n  msrpVAT: '699,000',\n  options: 5,\n  isDefault: false\n}));\nfunction Random(min, max) {\n  return Math.round(Math.random() * (max - min)) + min;\n}\nDATASOURCE.forEach((item, index) => {\n  if (index < 5) {\n    item.options = index + 5;\n  } else {\n    item.options = index;\n  }\n} );\nDATASOURCE.forEach((item, index) => {\n  if(index > 0) {\n    item.msrp = 669000 + Random(0, 10) * 10000;\n    item.msrpVAT = item.msrp + 30000;\n  }\n\n} );\n\nclass ModelManagementScenario extends React.Component {\n  COLUMNS = [\n    {\n    title: 'ID',\n    dataIndex: 'index',\n    key: 'index'\n  }, {\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name'\n  }, {\n    title: 'MSRP',\n    dataIndex: 'msrp',\n    key: 'msrp'\n  }, {\n    title: 'MSRP VAT',\n    dataIndex: 'msrpVAT',\n    key: 'msrpVAT'\n  }, {\n    title: 'Options',\n    dataIndex: 'options',\n    key: 'options'\n  },{\n    title: 'Actions',\n    dataIndex: 'index',\n    key:'isDefault',\n    render: (index) => {\n      if (index === 0) {\n        return (\n          <div>\n            <Button icon=\"eye\" type=\"primary\" onClick={() => this.props.history.push('/reporting')} ghost>Details</Button>\n            <Button icon=\"delete\" type=\"primary\" ghost>Delete</Button>\n            <Button icon='check-circle'\n              type=\"danger\" ghost>Is Default</Button>\n          </div>\n        )\n      } else {\n        return (\n          <div>\n            <Button icon=\"eye\" type=\"primary\" onClick={() => this.props.history.push('/reporting')} ghost>Details</Button>\n            <Button icon=\"delete\" type=\"primary\" ghost>Delete</Button>\n            <Button icon='check-circle' onClick={() => {\n              this.openNotification();\n              setTimeout(() => {\n                this.props.history.push('/model-management')\n              }, 1000)\n            }\n              } type=\"primary\" ghost>Set as Default</Button>\n          </div>\n        )\n      }\n\n    }\n  }];\n  openNotification() {\n    notification.open({\n      message: 'Notification Title',\n      description:\n        'Set as default success!',\n        duration: 1,\n      onClick: () => {\n        console.log('Notification Clicked!');\n      },\n    });\n  }\n  render() {\n    return (\n      <div className=\"model-management\">\n        <h2>Scenario</h2>\n        <Table\n          dataSource={DATASOURCE}\n          columns={this.COLUMNS}\n          rowSelection={{\n            type: 'checkbox',\n            columnTitle: 'Select for Comparision'\n          }}\n          rowKey=\"index\" />\n          <div className=\"actions\">\n            <Button icon=\"copy\"type=\"primary\" ghost onClick={() => this.props.history.push('/competitor-comparison')}>Comparision</Button>\n            <Button icon=\"plus\" type=\"primary\">Add</Button>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default ModelManagementScenario;"]},"metadata":{},"sourceType":"module"}